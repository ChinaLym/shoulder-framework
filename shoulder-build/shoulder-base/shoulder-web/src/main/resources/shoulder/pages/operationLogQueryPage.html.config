<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>操作日志管理系统</title>
    <style>
        :root {

            --primary-color: #3B82F6; /* 更现代的蓝色 */
            --primary2-color: #2563eb; /* 更现代的蓝色 */

            --secondary-color: #8b9cf6;

            --accent-50: #fffbeb;
            --accent-500: #f59e0b;
            --accent-600: #d97706;

            --success-color: #10B981; /* 清新的绿色 */
            --warning-color: #F59E0B; /* 柔和的琥珀色 */
            --danger-color: #EF4444; /* 协调的红色 */
            --text-primary: #1F2937; /* 深灰蓝 */
            --text-secondary: #4B5563;
            --border-color: #E5E7EB;
            --surface-color: #F9FAFB;
            --text-regular: #606266;
            /* 渐变色 */
            --primary-gradient: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);
            --success-gradient: linear-gradient(135deg, #10B981 0%, #34D399 100%);
            --transition-duration: 0.3s;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            transition: background-color 0.3s ease,
            border-color 0.3s ease,
            color 0.3s ease;
        }

        body {
            font-family: "Segoe UI", system-ui, -apple-system, sans-serif;
            padding: 20px;
            background-color: #f8f9fa;
            color: var(--text-primary);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            padding: 24px;
            transition: box-shadow var(--transition-duration);
        }

        .container:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        /* 筛选区域样式 */
        .filter-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 12px;
            margin: 24px 0;
            padding: 20px;
            background: white;
            border-radius: 8px;

            border: 1px solid var(--border-color);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        /* 查询按钮样式 */
        .filter-actions {
            grid-column: 1 / -1;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            border-top: 1px solid var(--border-color);
            padding-top: 16px;
            margin-top: 8px;
        }

        .secondary {
            background: var(--surface-color) transparent;
            color: var(--text-secondary);
            border-color: var(--border-color);
            border: 1px solid var(--border-color);
        }

        .secondary:hover {
            background: rgba(200, 200, 200, 0.9);
        }

        .filter-container button {
            color: white;
            background: var(--primary-gradient);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: none;
            padding: 10px 24px;
            border-radius: 8px;
            align-self: flex-end;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .filter-container button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(64, 158, 255, 0.3);
        }

        /* 图标样式 */
        .btn-icon {
            width: 18px;
            height: 18px;
            fill: currentColor;
            margin-right: 6px;
            vertical-align: middle;
        }

        /* 查看详情图标 */
        .action-icon {
            width: 24px;
            height: 24px;
            fill: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-icon:hover {
            fill: var(--primary-color);
            transform: scale(1.1);
        }

        /* 调整按钮内边距 */
        .filter-container button {
            padding: 10px 16px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-size: 14px;
            color: var(--text-regular);
        }

        .filter-group select,
        .filter-group input {
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            transition: border-color var(--transition-duration);
        }

        .filter-group select:focus,
        .filter-group input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(64, 158, 255, 0.1);
        }
        /* 自由输入提示样式 */
        .option-item.free-input {
            background: var(--surface-color);
            color: var(--text-secondary);
            padding: 8px 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .option-item.free-input strong {
            color: var(--primary-color);
            font-weight: 500;
        }

        .option-item.free-input:hover {
            background: var(--primary-color);
            color: white;
        }

        .option-item.free-input:hover strong {
            color: white;
        }

        /* 时间范围组合样式 */
        .time-actions {
            display: grid;
            align-items: center;
            grid-template-columns: 190px minmax(180px, 1fr) 24px minmax(180px, 1fr);
            gap: 12px;
        }

        input[type="datetime-local"] {
            min-width: 180px;
            padding: 8px 12px !important;
        }

        .quick-date {
            grid-column: 1 / 5;
            margin-bottom: 8px;
        }

        .searchable-select {
            position: relative;
        }

        .searchable-select input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
        }

        .options-container {
            position: absolute;
            width: 100%;
            max-height: 240px;
            overflow-y: auto;
            background: white;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            display: none;
        }

        .option-item {
            padding: 8px 12px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .option-item:hover {
            background: var(--primary-color);
            color: white;
        }

        .option-item[data-disabled="true"] {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .table-container {
            overflow-x: auto;
            margin: 20px 0;
            border-radius: 8px;
            position: relative;
        }

        .log-table {
            width: 100%;
            border-collapse: collapse;
            min-width: 1000px;
            --row-hover-bg: rgba(64, 158, 255, 0.03);
            --header-border: 2px solid var(--primary-color);
        }

        .log-table th, .log-table td {
            padding: 14px 16px;
            border-bottom: 1px solid var(--border-color);
            text-align: left;
            font-size: 14px;
            background: var(--surface-color);
            color: var(--text-primary);
        }

        .log-table td {
            padding: 14px 20px;
            border-bottom: 1px solid rgba(235, 238, 245, 0.6);
        }


        .log-table th {
            background: linear-gradient(to bottom, #f8fafc, #f1f5f9);
            border-bottom: var(--header-border);
            font-size: 15px;
            padding: 16px 20px;

            font-weight: 600;
            position: sticky;
            top: 0;
            cursor: pointer;
            transition: background-color var(--transition-duration);
        }

        .log-table th:hover {
            background-color: #f1f5f9;
        }

        .log-table tr:nth-child(even) {
            background-color: #f8fafc;
        }

        .log-table tr:hover {
            background-color: rgba(59, 130, 246, 0.05);
            background: var(--row-hover-bg);
            transition: background-color 0.3s;
        }

        /* 耗时颜色编码 */
        td:nth-child(6) {
            position: relative;
            padding-left: 28px !important;
        }

        td:nth-child(6)::before {
            content: '';
            position: absolute;
            left: 8px;
            top: 50%;
            transform: translateY(-50%);
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--duration-color);
        }

        /* 根据耗时设置颜色 */
        [data-duration^="0"] {
            --duration-color: #4caf50;
        }

        [data-duration^="1"] {
            --duration-color: #ffc107;
        }

        [data-duration^="2"] {
            --duration-color: #f44336;
        }

        /* 排序指示器 */
        .log-table th span {
            color: var(--primary-color);
            margin-left: 4px;
            font-size: 0.8em;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .status-success {
            background-color: rgba(16, 185, 129, 0.1);
            border-color: rgba(16, 185, 129, 0.2);
            color: var(--success-color);
        }

        .status-error {
            background-color: rgba(239, 68, 68, 0.1);
            border-color: rgba(239, 68, 68, 0.2);
            color: var(--danger-color);
        }

        .pagination {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-top: 24px;
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .pagination button {
            min-width: 96px;
            padding: 10px 18px;
            background: white;
            color: var(--primary-color);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            cursor: pointer;
            transition: all var(--transition-duration);
        }

        .pagination button:not(:disabled):hover {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .pagination button:disabled {
            color: #c0c4cc;
            cursor: not-allowed;
            background: #f5f7fa;
            opacity: 0.6;
            filter: grayscale(0.2);
        }

        .page-input {
            width: 120px;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            text-align: center;
        }

        .page-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(64, 158, 255, 0.1);
        }

        .toast {
            position: fixed;
            bottom: 24px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--text-primary);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
        }

        .loading-overlay {
            position: fixed;
            inset: 0;
            background: rgba(255, 255, 255, 0.9);
            display: none;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(2px);
        }

        .spinner {
            width: 56px;
            height: 56px;
            border-width: 4px;
            animation: pulse 1.5s ease-in-out infinite;
            border-radius: 50%;
            border-top-color: transparent;
        }

        @keyframes pulse {
            0% {
                transform: scale(0.95);
                opacity: 0.6;
            }
            50% {
                transform: scale(1.1);
                opacity: 1;
            }
            100% {
                transform: scale(0.95);
                opacity: 0.6;
            }
        }

        /* 骨架屏加载效果 */
        .skeleton-row td {
            height: 48px;
            background: linear-gradient(90deg, #f0f2f5 25%, #e5e8ec 50%, #f0f2f5 75%);
            background-size: 200% 100%;
            animation: skeleton 1.5s ease-in-out infinite;
        }

        @media (max-width: 768px) {
            .container {
                padding: 16px;
            }

            .log-table th,
            .log-table td {
                padding: 12px;
            }

            .time-column {
                min-width: 120px;
            }

            .time-actions {
                grid-template-columns: 1fr;
            }

            .filter-actions {
                flex-direction: column;
            }

            .filter-actions button {
                width: 100%;
                justify-content: center;
            }

            .detail-popup {
                width: calc(100vw - 32px);
                left: 16px;
                transform: none;
            }
        }

        /* 详情展开交互 */
        .detail-trigger {
            cursor: pointer;
            position: relative;
        }

        .detail-popup {
            right: 100%;
            left: auto;
            top: auto;
            width: 600px;
            max-height: 600px;
            overflow: auto;
            box-shadow: 0 12px 24px -4px rgba(0, 0, 0, 0.1);

            bottom: calc(100% + 8px);
            transform: translateX(-50%);

            display: none;
            position: absolute;
            background: white;
            border-radius: 8px;
            padding: 16px;
            z-index: 1001;
        }

        .detail-trigger:hover .detail-popup {
            bottom: auto;
            top: 50%;
            transform: translateY(-110px);

            display: block;
            animation: slideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-10px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        /* 添加移动端-查看详情交互 */
        @media (hover: none) {
            .detail-trigger .detail-popup {
                display: none !important;
            }

            .detail-trigger {
                position: relative;
            }

            .detail-trigger:active::after {
                content: "点击查看详情";
                position: absolute;
                bottom: 100%;
                white-space: nowrap;
                background: var(--text-primary);
                color: white;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
            }
        }

        .copy-trace, .copy-full-log {
            margin-top: 6px;
            padding: 6px 12px;
            border: 1px solid var(--border-color);
            background: var(--primary-color);
            color: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
            display: block;
            width: 100%;
        }

        .copy-trace:disabled, .copy-full-log:disabled {
            background: #f5f7fa;
            color: #c0c4cc;
            cursor: not-allowed;
            border-color: #e4e7ed;
        }

        .copy-trace:not(:disabled):hover, .copy-full-log:not(:disabled):hover {
            background: var(--secondary-color);
            transform: translateY(-1px) scale(1.02);
        }

    </style>
</head>
<body>
<div class="container">
    <h1 style="margin-bottom: 24px;">操作日志查询</h1>

    <!-- 新增筛选区域 -->
    <div class="filter-container">
        <div class="filter-group">
            <label>用户</label>
            <input type="text" placeholder="userId" id="userId">
        </div>
        <div class="filter-group">
            <label>操作对象类型</label>
            <div class="searchable-select">
                <input type="text"
                       id="objectTypeSearch"
                       placeholder="输入关键词筛选"
                       autocomplete="off">
                <select id="operationObjectType" style="display:none">
                    <option value="">全部</option>
                    <option value="0">成功</option>
                    <option value="1">失败</option>
                    <option value="2">部分成功</option>
                </select>
                <div class="options-container"></div>
            </div>
        </div>
        <div class="filter-group">
            <label>操作类型</label>
            <div class="searchable-select">
                <input type="text"
                       id="operationSearch"
                       placeholder="创建、查询、删除..."
                       autocomplete="off">
                <select id="operation" style="display:none">
                    <option value="">全部</option>
                    <option value="create">创建</option>
                    <option value="query">查询</option>
                    <option value="update">更新</option>
                    <option value="delete">删除</option>
                    <option value="upload">上传</option>
                    <option value="download">下载</option>
                    <option value="upload_validate">上传并验证</option>
                    <option value="import">导入</option>
                    <option value="export">导出</option>
                </select>
                <div class="options-container"></div>
            </div>
        </div>
        <div class="filter-group">
            <label>操作对象id</label>
            <input type="text" placeholder="objectId" id="operationObjectId">
        </div>
        <div class="filter-group">
            <label>traceId</label>
            <input type="text" placeholder="213jf9..." id="traceId">
        </div>
        <div class="filter-group">
            <label>操作结果</label>
            <select id="filterResult">
                <option value="">全部</option>
                <option value="0">成功</option>
                <option value="1">失败</option>
                <option value="2">部分成功</option>
            </select>
        </div>

        <div class="filter-group time-range">
            <label>时间范围</label>
            <div class="time-actions">
                <select class="quick-date" id="quickDate">
                    <option value="custom">点击选择日期范围</option>
                    <option value="today">今天</option>
                    <option value="3days">最近3天</option>
                    <option value="7days">最近7天</option>
                    <option value="30days">最近30天</option>
                </select>
                <input type="datetime-local" id="operationTimeStart">
                <span>至</span>
                <input type="datetime-local" id="endTimeBefore">
            </div>
        </div>
        <div class="filter-actions">
            <button class="secondary" id="resetFilters">
                <svg class="btn-icon" viewBox="0 0 24 24">
                    <path d="M12 5V2L8 6l4 4V7c3.31 0 6 2.69 6 6 0 2.97-2.17 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93 0-4.42-3.58-8-8-8zm-6 8c0-1.65.67-3.15 1.76-4.24L6.34 7.34C5.56 8.12 5 9.21 5 10.5c0 2.61 2.12 4.73 4.75 4.75l1.25-.01v-2l-1.25.01c-1.52-.01-2.75-1.24-2.75-2.74z"/>
                </svg>
                重置条件
            </button>
            <button class="primary" id="search" aria-label="执行查询（快捷键：Enter）" role="button" tabindex="0">
                <svg class="btn-icon" viewBox="0 0 24 24">
                    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
                立即查询
            </button>
        </div>
    </div>

    <div class="table-container">
        <table class="log-table">
            <thead>
            <tr>
                <th data-sort="userRealName">用户 <span>▼</span></th>
                <th data-sort="operation">操作类型 <span>▼</span></th>
                <th data-sort="objectType">对象类型 <span>▼</span></th>
                <th data-sort="terminalType">终端类型 <span>▼</span></th>
                <th data-sort="operationTime">操作时间 <span>▼</span></th>
                <th data-sort="duration">耗时 <span>▼</span></th>
                <th data-sort="result">结果 <span>▼</span></th>
                <th>详情</th>
                <th>操作</th>
            </tr>
            </thead>
            <tbody id="logBody"></tbody>
        </table>
    </div>

    <!-- 改进的分页控件 -->
    <div class="pagination">
        <span class="page-info" id="pageInfo"></span>
        <div class="pagination-controls">
            <input type="number" class="page-input" id="pageJump" min="1">
            <button id="prevPage" disabled>上一页</button>
            <button id="nextPage" disabled>下一页</button>
        </div>
    </div>
</div>

<div class="loading-overlay" id="loading">
    <div class="spinner"></div>
</div>

<div class="toast" id="toast"></div>

<script>

    class LogManager {
        constructor() {
            this.currentPage = 1;
            this.pageSize = 20;
            this.totalPages = 0;
            this.sortField = 'operationTime';
            this.sortOrder = 'desc';
            this.filterConditions = {};

            this.initEventListeners();
            this.initSearchableSelects();

            this.loadData();
        }

        async loadData() {
            // 保留最后请求标记
            this.lastRequestId = Symbol();
            const currentRequestId = this.lastRequestId;

            this.showSkeleton();
            this.showLoading();
            try {
                // 收集所有筛选条件
                this.filterConditions = {
                    userId: this.ignoreEmptyInput(document.getElementById('userId').value),
                    operation: this.ignoreEmptyInput(document.getElementById('operation').value),
                    objectType: this.ignoreEmptyInput(document.getElementById('operationObjectType').value),
                    objectId: this.ignoreEmptyInput(document.getElementById('operationObjectId').value),
                    traceId: this.ignoreEmptyInput(document.getElementById('traceId').value),
                    result: this.ignoreEmptyInput(document.getElementById('filterResult').value),

                    startTime: this.ignoreEmptyInput(document.getElementById('operationTimeStart').value),
                    endTime: this.ignoreEmptyInput(document.getElementById('endTimeBefore').value)
                };
                // 参数验证
                this.checkParam();

                const params = {
                    pageNo: this.currentPage,
                    pageSize: this.pageSize,
                    orderRules: [{
                        fieldName: this.sortField,
                        order: this.sortOrder,
                    }],
                    condition: //null,
                        {
                            userId: this.filterConditions.userId,
                            operation: this.filterConditions.operation,
                            objectType: this.filterConditions.objectType,
                            objectId: this.filterConditions.objectId,
                            result: this.filterConditions.result,
                            traceId: this.filterConditions.traceId,
                        },
                    ext: this.filterConditions.startTime ? {
                        operationTime_st: this.formatToDateTime(this.filterConditions.startTime),
                        endTime_ed: this.formatToDateTime(this.filterConditions.endTime)
                    } : null
                };

                const response = await fetch('SHOULDER_PAGE_HOST##OP_LOG_API_PATH##/page', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(params)
                });

                const data = await response.json();
                // 只处理最后一次发起的查询
                if (currentRequestId !== this.lastRequestId) return;
                if (data.code !== '0') throw new Error(data.msg);

                this.updateTable(data.data);
                this.updatePagination(data.data);
            } catch (error) {
                this.showToast(`加载失败: ${error.message}`, 'error');
            } finally {
                this.hideLoading();
            }
        }

        updateTable(pageData) {
            const tbody = document.getElementById('logBody');
            const fragment = document.createDocumentFragment();

            pageData.list.forEach(log => {
                const row = document.createElement('tr');
                const duration = new Date(log.endTime) - new Date(log.operationTime);

                row.innerHTML = `
                      <td>${log.userRealName || log.userId}</td>
                      <td>${log.operation}</td>
                      <td>${log.objectType || '-'}</td>
                      <td>${log.terminalType}</td>
                      <td class="time-column">${this.formatDateTime(log.operationTime)}</td>
                      <td>${this.formatDuration(duration)}</td>
                      <td>
                        <span class="status-badge ${log.result === 'SUCCESS' ? 'status-success' : 'status-error'}"
                            role="status" aria-label="操作结果：${log.result}">
                          ${log.result}
                        </span>
                      </td>
                      <td class="detail-cell">
                        <div class="detail-trigger">
                          <svg class="action-icon" viewBox="0 0 24 24">
                            <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                          </svg>
                          <div class="detail-popup">
                            <pre>${JSON.stringify(log || {}, null, 2)}</pre>
                          </div>
                        </div>
                      </td>
                      <td>
                          <button class="copy-trace"
                                      ${!log.traceId ? 'disabled' : ''}
                                      data-trace="${log.traceId}"
                                      title="${log.traceId || '无 traceId'}">
                            <svg class="btn-icon" viewBox="0 0 24 24">
                                <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                              </svg>
                              复制 trace
                          </button>
                          <button class="copy-full-log"
                                    data-log='${JSON.stringify(log).replace(/'/g, "&apos;")}'
                                    title="复制完整日志">
                            <svg class="btn-icon" viewBox="0 0 24 24">
                                <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                              </svg>复制完整日志
                          </button>
                      </td>
                    `;
                row.querySelector('td:nth-child(6)').dataset.duration = duration < 200 ? '0' : duration < 2000 ? '1' : '2';
                fragment.appendChild(row);
            });

            tbody.innerHTML = '';
            tbody.appendChild(fragment);
        }

        updatePagination(pageData) {
            this.totalPages = pageData.totalPageNum;
            document.getElementById('pageInfo').textContent =
                `共 ${pageData.total} 条记录，当前第 ${pageData.pageNum} 页 / 共 ${pageData.totalPageNum} 页`;

            document.getElementById('prevPage').disabled = !pageData.hasPreviousPage;
            document.getElementById('nextPage').disabled = !pageData.hasNextPage;
            document.getElementById('pageJump').value = pageData.pageNum;
        }

        formatDateTime(isoString) {
            const date = new Date(isoString);
            return new Intl.DateTimeFormat('zh-CN', {
                timeZone: 'Asia/Shanghai',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            }).format(date);
        }

        formatDuration(ms) {
            return ms > 1000 ? `${(ms / 1000).toFixed(1)}s` : `${ms}ms`;
        }

        showToast(message, type = 'info') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.style.opacity = 1;
            setTimeout(() => toast.style.opacity = 0, 3000);
        }

        // 时间格式转换方法
        formatToDateTime(datetimeStr) {
            if (!datetimeStr) return null;
            return datetimeStr.replace('T', ' ') + ':00';
        }

        setDateInputs(startDate, endDate) {
            const format = date => {
                const pad = n => n.toString().padStart(2, '0');
                return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
            };
            document.getElementById('operationTimeStart').value = format(startDate);
            document.getElementById('endTimeBefore').value = format(endDate);
            this.loadData();
        }

        initEventListeners() {

            // todo 增加 objectType 快捷输入逻辑

            document.addEventListener('keydown', (e) => {
                // 添加键盘快捷键 ctrl + 左右快速翻页
                if (e.ctrlKey) {
                    switch (e.key) {
                        case 'ArrowLeft':
                            document.getElementById('prevPage').click();
                            e.preventDefault();
                            break;
                        case 'ArrowRight':
                            document.getElementById('nextPage').click();
                            e.preventDefault();
                            break;
                    }
                }
                // 回车查询
                if (e.target === document.body && e.key === '/') {
                    document.getElementById('search').focus();
                    e.preventDefault();
                }
            });
            // 添加焦点样式，更能辅助用户连续 table 时选的是哪个输入框 / 按钮
            document.querySelectorAll('button, input, select').forEach(el => {
                el.addEventListener('focus', () => el.style.boxShadow = '0 0 0 2px rgba(64, 158, 255, 0.5)');
                el.addEventListener('blur', () => el.style.boxShadow = '');
            });

            // 快捷日期选择
            document.getElementById('quickDate').addEventListener('change', (e) => {
                const rangeMap = {
                    'today': () => {
                        const start = new Date();
                        start.setHours(0, 0, 0, 0);
                        const end = new Date();
                        end.setHours(23, 59, 59, 999);
                        return [start, end];
                    },
                    '3days': () => {
                        const start = new Date();
                        start.setDate(start.getDate() - 2); // 包含今天共3天
                        start.setHours(0, 0, 0, 0);
                        const end = new Date();
                        end.setHours(23, 59, 59, 999);
                        return [start, end];
                    },
                    '7days': () => {
                        const start = new Date();
                        start.setDate(start.getDate() - 6); // 包含今天共7天
                        start.setHours(0, 0, 0, 0);
                        const end = new Date();
                        end.setHours(23, 59, 59, 999);
                        return [start, end];
                    },
                    '30days': () => {
                        const start = new Date();
                        start.setDate(start.getDate() - 29); // 包含今天共30天
                        start.setHours(0, 0, 0, 0);
                        const end = new Date();
                        end.setHours(23, 59, 59, 999);
                        return [start, end];
                    },
                    'custom': () => null
                };
                const handler = rangeMap[e.target.value];
                if (handler) {
                    const dates = handler();
                    dates && this.setDateInputs(...dates);
                }
            });

            // 查询按钮
            document.getElementById('search').addEventListener('click', () => {
                this.currentPage = 1;
                this.loadData();
            });

            document.getElementById('resetFilters').addEventListener('click', () => logManager.resetFilters());

            // 分页控制
            document.getElementById('prevPage').addEventListener('click', () => {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    this.loadData();
                }
            });
            document.getElementById('nextPage').addEventListener('click', () => {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    this.loadData();
                }
            });
            // 页码跳转
            document.getElementById('pageJump').addEventListener('change', (e) => {
                const page = Math.max(1, Math.min(Number(e.target.value), this.totalPages));

                if (page > this.totalPages) {
                    this.showToast(`最大页数为 ${this.totalPages}`, 'warning');
                    e.target.value = this.totalPages;
                } else {
                    e.target.setCustomValidity('');
                    if (!isNaN(page)) {
                        this.currentPage = page;
                        this.loadData();
                    }
                }
            });

            // 表头排序
            document.querySelectorAll('.log-table th[data-sort]').forEach(th => {
                th.addEventListener('click', () => {
                    const field = th.dataset.sort;
                    this.sortOrder = this.sortField === field && this.sortOrder === 'asc' ? 'desc' : 'asc';
                    this.sortField = field;
                    this.loadData();
                    document.querySelectorAll('.log-table th span').forEach(span => {
                        span.textContent = '▼'; // 重置所有箭头
                    });
                    th.querySelector('span').textContent = this.sortOrder === 'asc' ? '▲' : '▼';
                });
            });

            // 输入条件后，默认查第一页
            const filterInputs = ['#userId', '#operationObjectType', '#operationObjectId', '#traceId', '#filterResult', '#operationTimeStart', '#endTimeBefore'];
            filterInputs.forEach(selector => {
                document.querySelector(selector).addEventListener('change', () => {
                    this.currentPage = 1;
                });
            });

            // 添加防抖处理筛选输入
            const debouncedLoad = this.debounce(() => this.loadData(), 500);
            filterInputs.forEach(selector => {
                document.querySelector(selector).addEventListener('input', debouncedLoad);
            });

            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('copy-trace')) {
                    const traceId = e.target.dataset.trace;
                    this.copyToClipboard(traceId, traceId);
                }
                if (e.target.classList.contains('copy-full-log')) {
                    const logData = JSON.parse(e.target.dataset.log);
                    this.copyFormattedLog(logData);
                }
            });
        }

        initSearchableSelects() {
            const createSearchable = (inputId, originalSelectId) => {
                const input = document.getElementById(inputId);
                const originalSelect = document.getElementById(originalSelectId);
                const optionsContainer = input.parentElement.querySelector('.options-container');

                // 初始化选项
                const syncSelectValue = () => {
                    const matchedOption = Array.from(originalSelect.options).find(
                        opt => opt.text === input.value
                    );

                    // 优先匹配选项文本
                    if (matchedOption) {
                        originalSelect.value = matchedOption.value;
                    } else {
                        // 当自由输入时，自动创建临时选项
                        const tempOption = document.createElement('option');
                        tempOption.value = input.value;
                        tempOption.text = input.value;
                        originalSelect.appendChild(tempOption);
                        originalSelect.value = input.value;
                    }
                };

                // 修改选项更新逻辑
                const updateOptions = (searchTerm = '') => {
                    optionsContainer.innerHTML = '';
                    Array.from(originalSelect.options).forEach(opt => {
                        if (opt.value === '') return;

                        const matchText = opt.text.toLowerCase().includes(searchTerm.toLowerCase());
                        const matchValue = opt.value.toLowerCase().includes(searchTerm.toLowerCase());

                        if (matchText || matchValue || searchTerm === '') {
                            const div = document.createElement('div');
                            div.className = 'option-item';
                            div.textContent = opt.text;
                            div.onclick = () => {
                                originalSelect.value = opt.value;
                                input.value = opt.text;
                                optionsContainer.style.display = 'none';
                            };
                            optionsContainer.appendChild(div);
                        }
                    });

                    // 新增自由输入选项
                    if (searchTerm && !Array.from(originalSelect.options).some(
                        opt => opt.text === searchTerm
                    )) {
                        const div = document.createElement('div');
                        div.className = 'option-item free-input';
                        div.innerHTML = `
                        <span>使用自定义值:</span>
                        <strong>${searchTerm}</strong>
                    `;
                        div.onclick = () => {
                            const newOption = document.createElement('option');
                            newOption.value = searchTerm;
                            newOption.text = searchTerm;
                            originalSelect.appendChild(newOption);
                            originalSelect.value = searchTerm;
                            input.value = searchTerm;
                            optionsContainer.style.display = 'none';
                        };
                        optionsContainer.appendChild(div);
                    }
                };

                // 新增输入框失焦同步
                input.addEventListener('blur', syncSelectValue);

                input.addEventListener('focus', () => {
                    optionsContainer.style.display = 'block';
                    updateOptions();
                });

                input.addEventListener('input', (e) => {
                    updateOptions(e.target.value);
                });

                document.addEventListener('click', (e) => {
                    if (!input.parentElement.contains(e.target)) {
                        optionsContainer.style.display = 'none';
                    }
                });
            };

            createSearchable('objectTypeSearch', 'operationObjectType');
            createSearchable('operationSearch', 'operation');
        }

        async copyToClipboard(desc, text) {
            try {
                await navigator.clipboard.writeText(text);
                this.showToast(desc + ' 已复制到剪贴板');
            } catch (err) {
                this.showToast('复制失败，请手动复制', 'error');
                console.error('复制失败:', err);
            }
        }

        copyFormattedLog(log) {
            const formattedLog = JSON.stringify(log, (k, v) => {
                if (typeof v === 'string' && v.match(/^\d{4}-\d{2}-\d{2}T/)) {
                    return this.formatDateTime(v) + ' (CST)';
                }
                return v;
            }, 2);
            this.copyToClipboard('完整日志', formattedLog);
        }

        debounce(fn, delay) {
            let timer;
            return (...args) => {
                clearTimeout(timer);
                timer = setTimeout(() => fn.apply(this, args), delay);
            };
        }

        checkParam() {
            if (this.filterConditions.startTime && this.filterConditions.endTime
                && this.filterConditions.startTime > this.filterConditions.endTime) {
                this.showToast("结束时间不能早于开始时间", "error");
                throw new Error('Invalid time range');
            }
        }

        ignoreEmptyInput(input) {
            if (input == null || input.trim() === '') {
                return null;
            }
            return input;
        }

        showLoading() {
            document.getElementById('loading').style.display = 'flex';
        }

        hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        resetFilters() {
            document.querySelectorAll('.filter-container input, .filter-container select').forEach(el => {
                if (el.tagName === 'INPUT') el.value = '';
                if (el.tagName === 'SELECT') el.selectedIndex = 0;
            });
            this.currentPage = 1;
            this.loadData();
        }

        /* 骨架 */
        showSkeleton() {
            const tbody = document.getElementById('logBody');
            tbody.innerHTML = Array(this.pageSize).fill('<td></td>') // 动态生成与每页行数一致的骨架
                .map(() => `
                  <tr class="skeleton-row">
                    ${Array(9).fill('<td></td>').map(() => `<td><div class="skeleton-cell"></div></td>`).join('')}
                  </tr>
                `).join('');
        }
    }

    // 初始化应用
    const
        logManager = new LogManager();
</script>
</body>
</html>
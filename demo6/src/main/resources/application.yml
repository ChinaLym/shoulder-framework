demo:
  auth:
    host: authServer.com
    port: 8081
    uri: http://${demo.auth.host:localhost}:${demo.auth.port:8081}
  resource:
    host: resourceServer.com
    port: 8000
    uri: http://${demo.resource.host:localhost}:${demo.resource.port:8000}

spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_ADDR}/demo_shoulder?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
    username: root
    password: ${MYSQL_PWD} # 这里使用了系统的环境变量，参见 spring boot 的特性

  security:
    oauth2:
      client:
        registration:               # 需要把 demo 相关的配置到 demo 的授权服务器里，类似在QQ的开发者页面注册应用
          demo-auth-code:
            client-name: demo-授权码模式
            provider: demo
            client-id: demo-client-id
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/{action}/oauth2/code/demo' # 默认 {baseUrl}/{action}/oauth2/code/{registrationId} 即 http://demo.com/login/oauth/code/demo
          demo-client-creds:  # 客户端模式
            client-name: demo-客户端模式
            provider: demo
            client-id: demo-client-id
            client-secret: secret
            authorization-grant-type: client_credentials
            scope: message.read,message.write
          demo-password:      # oauth2-密码模式
            client-name: demo-密码模式
            provider: demo
            client-id: demo-client-id
            client-secret: secret
            authorization-grant-type: password
            scope: message.read,message.write

          github:
            client-id: xxxx
            client-secret: xxxx
            client-name: github 登录

          gitee:
            client-id: xxxx
            client-secret: xxxx
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
            client-authentication-method: post    # default: basic
            scope: user_info                      # default: emptySet
            client-name: gitee 登录               # optional

          qq:
            client-id: xxx
            client-secret: xxxx
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}' # http://demo.com/login/oauth/code/qq
            client-name: QQ 登录

        provider:
          demo:
            authorization-uri: ${demo.auth.uri}/oauth/authorize # 操作系统 host 文件中 authServer 对应着 127.0.0.1
            token-uri: ${demo.auth.uri}/oauth/token
            user-info-uri: ${demo.resource.uri}/user
            user-name-attribute: userName
          gitee:
            authorization-uri: https://gitee.com/oauth/authorize
            token-uri: https://gitee.com/oauth/token
            user-info-uri: https://gitee.com/api/v5/user
            user-name-attribute: id
          qq:
            authorization-uri: https://graph.qq.com/oauth2.0/authorize # host 文件中 authServer 对应着 127.0.0.1
            token-uri: https://graph.qq.com/oauth2.0/token
            user-info-uri: https://graph.qq.com/user/get_user_info
            user-name-attribute: nickname


shoulder:
  application:
    errorCodePrefix: '0x000b'

  # ---------------------------- 关注这里 ------------------------------
  security:
    auth: # 如果使用者自行实现登录成功、退出成功处理器，则这些配置将失效，使用者实现的优先生效
      type: token # 测试环境这里设置为 token。session 方式已经在页面上可以测过了！！！！！！！
      responseType: json
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cn.itlym</groupId>
        <artifactId>shoulder-parent</artifactId>
        <version>0.7-SNAPSHOT</version><!-- shoulder-version -->
    </parent>

    <groupId>com.example</groupId>
    <artifactId>demo1</artifactId>

    <name>demo1</name>
    <packaging>jar</packaging>
    <description>Demo project for Shoulder Framework</description>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>
        <!-- shoulder 继承了 spring boot 的所有特性，引入 spring boot/shoulder 的jar 一样不需要写版本号 -->

        <!-- 包含了 spring-boot-starter-web，在其之上额外提供了更棒的能力 -->
        <dependency>
            <groupId>cn.itlym</groupId>
            <artifactId>shoulder-starter-web</artifactId>
        </dependency>

        <!-- 接口文档 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
        </dependency>

        <!-- 加密算法 -->
        <dependency>
            <groupId>cn.itlym</groupId>
            <artifactId>shoulder-crypto</artifactId>
        </dependency>

        <!-- 加密通信 -->
        <dependency>
            <groupId>cn.itlym</groupId>
            <artifactId>shoulder-crypto-negotiation</artifactId>
        </dependency>

        <!-- shoulder 改写的 lombok，额外提供 @SLog -->
        <dependency>
            <groupId>cn.itlym.shoulder</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 操作日志 -->
        <dependency>
            <groupId>cn.itlym</groupId>
            <artifactId>shoulder-operation-log</artifactId>
        </dependency>

        <!-- 对象转换 -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
        </dependency>

        <!-- 监控相关（附工具包：可监控的线程池） -->
        <dependency>
            <groupId>cn.itlym</groupId>
            <artifactId>shoulder-starter-monitor</artifactId>
        </dependency>

        <!-- test cluster -->
        <!--<dependency>
            <groupId>cn.itlym</groupId>
            <artifactId>shoulder-cluster</artifactId>
        </dependency>-->


        <!-- 热更新插件，修改代码无需重启 -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>-->

        <!-- ====================== 测试 ====================== -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <!-- spring boot 打包 -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- 自动生成错误码以及对应的翻译 可以在 target 目录生成所有实现 ErrorCode 接口错误码枚举类的翻译文件 -->
            <!--<plugin>
                <groupId>cn.itlym.shoulder</groupId>
                <artifactId>errcode-maven-plugin</artifactId>
                <version>0.1-SNAPSHOT</version>
                <configuration>
                    <errorCodePrefix>0x000a</errorCodePrefix>
                    <scanPackage>com.example.demo1</scanPackage>
                </configuration>
            </plugin>-->

        </plugins>
    </build>

</project>

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>cn.itlym</groupId>
        <artifactId>shoulder-framework</artifactId>
        <version>1.0.0-M1.2</version><!-- shoulder-version -->
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>
    <artifactId>shoulder-parent</artifactId>
    <name>${project.artifactId}</name>
    <url>https://doc.itlym.cn</url>
    <description>
        Shoulder 工程的父模块，包含了默认组件的版本管理以及构建插件的默认设置。
    </description>

    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.javadoc.charset>${project.build.sourceEncoding}</maven.javadoc.charset>
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>

        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <maven-source-plugin.version>3.3.0</maven-source-plugin.version>
        <maven-javadoc-plugin.version>3.6.0</maven-javadoc-plugin.version>
        <jacoco.version>0.8.12</jacoco.version>
        <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>
        <maven-gpg-plugin.version>3.1.0</maven-gpg-plugin.version>

        <maven-surefire-plugin.version>3.1.2</maven-surefire-plugin.version>
        <findbugs-maven-plugin.version>3.0.5</findbugs-maven-plugin.version>
        <cobertura-maven-plugin.version>2.7</cobertura-maven-plugin.version>
        <versions-maven-plugin.version>2.7</versions-maven-plugin.version>
        <license-maven-plugin.version>2.2.0</license-maven-plugin.version>
        <git-commit-id-plugin.version>6.0.0</git-commit-id-plugin.version>
        <sonar-maven-plugin.version>3.10.0.2594</sonar-maven-plugin.version>

        <shoulder-maven-plugin.version>1.2.2</shoulder-maven-plugin.version>
        <shoulder-framework.errcode-prefix>0x0000</shoulder-framework.errcode-prefix>

        <springdoc-openapi-maven-plugin.version>0.3</springdoc-openapi-maven-plugin.version>

    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>cn.itlym</groupId>
                <artifactId>shoulder-dependencies</artifactId>
                <version>1.0.0-M1.2</version><!-- shoulder-version -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <distributionManagement>
        <site>
            <id>shoulder</id>
            <name>document</name>
            <url>https://doc.itlym.cn</url>
        </site>
    </distributionManagement>

    <!-- 开源组织 -->
    <organization>
        <name>ChinaLym</name>
        <url>https://doc.itlym.cn</url>
    </organization>

    <!-- 开发者 -->
    <developers>
        <developer>
            <id>lym</id>
            <name>lym</name>
            <email>cn_lym@foxmail.com</email>
            <organization>${project.organization.name}</organization>
            <organizationUrl>${project.organization.url}</organizationUrl>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>+8</timezone>
            <properties>
                <picUrl>http://doc.itlym.cn/shoulder</picUrl>
            </properties>
        </developer>
    </developers>

    <!-- 版本控制，供其他插件使用 -->
    <scm>
        <connection>scm:git:git://github.com/ChinaLym/shoulder-framework.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/ChinaLym/shoulder-framework.git</developerConnection>
        <url>git@github.com:ChinaLym/shoulder-framework.git</url>
        <tag>${project.version}</tag>
    </scm>

    <issueManagement>
        <system>Github Issue</system>
        <url>https://github.com/ChinaLym/shoulder-framework/issues</url>
    </issueManagement>

    <!--开源许可协议采用 Apache 2.0 协议-->
    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <build>

        <!-- plugin management 以下插件子模块自动继承，不必引入 -->
        <pluginManagement>
            <plugins>

                <!-- shoulder 开发的错误码插件 -->
                <plugin>
                    <groupId>cn.itlym.shoulder</groupId>
                    <artifactId>shoulder-maven-plugin</artifactId>
                    <version>${shoulder-maven-plugin.version}</version>
                    <configuration>
                        <!-- 【必填】本组件对应的错误码前缀 -->
                        <!--<errorCodePrefix>0x0000</errorCodePrefix>-->
                        <!-- 【必填】要生成错误码文件，扫描的包路径，通常为组件错误码枚举/常量类所在包路径，越精确，越能减少插件构建时间 -->
                        <!--<scanPackage>org.shoulder.core</scanPackage>-->
                    </configuration>
                    <executions>
                        <!-- 开启插件的哪些功能 -->
                        <execution>
                            <!-- 在 mvn compile 阶段触发该插件 -->
                            <phase>package</phase><!-- shoulder-maven-plugin deploy 发布才生成 erorCode标注，compile 打包编译就生成 -->
                            <goals>
                                <!-- 执行该插件的 生成错误码翻译 能力 -->
                                <goal>generateErrorCodeInfo</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- compiler settings -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <!-- UTF8 coding -->
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <showDeprecation>true</showDeprecation>
                        <showWarnings>true</showWarnings>
                        <!-- 编译时打印告警，方便排查问题 -->
                        <compilerArgument>-Xlint:unchecked</compilerArgument>
                        <compilerArgs>
                            <!--                                                    <arg>-XDcompilePolicy=simple</arg>-->
                            <!--                                                    <arg>-Xplugin:ErrorProne</arg>-->
                            <arg>-parameters</arg>
                        </compilerArgs>
                        <!--                        修复-->
                        <!--                        <compilerArgs>-->
                        <!--                            <arg>-XDcompilePolicy=simple</arg>-->
                        <!--                            <arg>-Xplugin:ErrorProne -XepPatchChecks:ArrayEquals-->
                        <!--                                -XepPatchLocation:IN_PLACE</arg>-->
                        <!--                        </compilerArgs>-->
                        <!--                        <annotationProcessorPaths>-->
                        <!--                            <path>-->
                        <!--                                <groupId>com.google.errorprone</groupId>-->
                        <!--                                <artifactId>error_prone_core</artifactId>-->
                        <!--                                <version>2.15.0</version>-->
                        <!--                            </path>-->
                        <!--                        </annotationProcessorPaths>-->
                    </configuration>
                </plugin>

                <!-- License Check And Sign 开原协议检查-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>${license-maven-plugin.version}</version>
                    <configuration>
                        <!-- config for license:aggregate-add-third-party -->
                        <outputDirectory>${project.basedir}</outputDirectory>
                        <thirdPartyFilename>LICENSE-3RD-PARTY</thirdPartyFilename>
                        <fileTemplate>/org/codehaus/mojo/license/third-party-file-groupByLicense.ftl</fileTemplate>
                        <useMissingFile>true</useMissingFile>
                        <missingFile>${project.basedir}/LICENSE-3RD-PARTY.properties</missingFile>
                        <aggregateMissingLicensesFile>${project.basedir}/LICENSE-3RD-PARTY.properties
                        </aggregateMissingLicensesFile>
                        <licenseMerges>
                            <licenseMerge>Apache 2.0|ASL, version
                                2|http://www.apache.org/licenses/LICENSE-2.0.txt|http://asm.ow2.org/license.html|The
                                Apache License, Version 2.0|Apache License|Apache License Version 2|Apache License
                                Version 2.0|Apache Software License - Version 2.0|Apache 2.0 License|Apache License
                                2.0|ASL|Apache 2|Apache-2.0|the Apache License, ASL Version 2.0|The Apache Software
                                License, Version 2.0|Apache License, Version 2.0|Apache Public License 2.0
                            </licenseMerge>
                            <licenseMerge>BSD|The BSD 3-Clause License|The BSD License|Modified BSD License|New BSD
                                License|New BSD license|Two-clause BSD-style license|BSD licence|BSD New|The New BSD
                                License|BSD 3-Clause|BSD 3-clause
                            </licenseMerge>
                            <licenseMerge>MIT|MIT License|The MIT License</licenseMerge>
                            <licenseMerge>LGPL|LGPL, version 2.1|GNU Library or Lesser General Public License (LGPL)
                                V2.1|GNU Lesser General Public License (LGPL), Version 2.1|GNU Lesser General Public
                                License, Version 2.1|LGPL 2.1
                            </licenseMerge>
                            <licenseMerge>CDDL|CDDL+GPL|CDDL+GPL License|CDDL + GPLv2 with classpath exception|CDDL
                                License|CDDL 1.0|CDDL 1.1|COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version
                                1.0|Common Development and Distribution License (CDDL) v1.0
                            </licenseMerge>
                            <licenseMerge>EPL|Eclipse Public License - Version 1.0</licenseMerge>
                            <licenseMerge>GPL|GPL2 w/ CPE|GPLv2+CE|GNU General Public Library</licenseMerge>
                            <licenseMerge>MPL|MPL 1.1</licenseMerge>
                            <licenseMerge>Public Domain</licenseMerge>
                            <licenseMerge>Common Public License|Common Public License Version 1.0</licenseMerge>
                            <licenseMerge>CC0|CC0 1.0 Universal|Public Domain, per Creative Commons CC0</licenseMerge>
                            <licenseMerge>Unknown License|Unknown license</licenseMerge>
                        </licenseMerges>

                        <!-- config for license:aggregate-download-licenses -->
                        <aggregateDownloadLicenses.executeOnlyOnRootModule>true
                        </aggregateDownloadLicenses.executeOnlyOnRootModule>
                        <!--<licensesConfigFile>${project.basedir}/lic/config/licenses.xml</licensesConfigFile>-->
                        <licensesOutputFile>${project.basedir}/lic/licenses.xml</licensesOutputFile>
                        <licensesOutputDirectory>${project.basedir}/lic/licenses/</licensesOutputDirectory>

                        <!-- config for license:update-file-header -->
                        <licenseName>apache_v2</licenseName>
                        <inceptionYear>2020</inceptionYear>
                        <organizationName>${project.organization.name}</organizationName>
                        <projectName>shoulder-framework</projectName>
                        <roots>
                            <root>src/main/java</root>
                            <root>src/test/java</root>
                        </roots>
                        <includes>
                            <include>**/*.java</include>
                            <include>**/*.xml</include>
                            <include>**/*.sh</include>
                            <include>**/*.py</include>
                            <include>**/*.properties</include>
                            <include>**/*.sql</include>
                            <include>**/*.html</include>
                            <include>**/*.less</include>
                            <include>**/*.css</include>
                            <include>**/*.js</include>
                            <include>**/*.json</include>
                        </includes>
                        <extraExtensions>
                            <scala>java</scala>
                        </extraExtensions>
                        <canUpdateCopyright>true</canUpdateCopyright>
                        <canUpdateDescription>true</canUpdateDescription>
                        <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
                        <emptyLineAfterHeader>true</emptyLineAfterHeader>
                        <processStartTag>&lt;&lt;</processStartTag>
                        <processEndTag>&gt;&gt;</processEndTag>
                        <sectionDelimiter>==</sectionDelimiter>

                        <!-- config for mvn license:update-project-license -->
                        <licenseFile>${project.basedir}/LICENSE</licenseFile>
                    </configuration>
                </plugin>

                <!-- attach source into jar 打包加入源码 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <configuration>
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase><!-- ACTIVE_WITH_package --><!-- 默认发布带源码，本地构建不带源码 -->
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- 生成 Javadoc -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                    <configuration>
                        <encoding>${maven.javadoc.charset}</encoding>
                        <charset>${maven.javadoc.charset}</charset>
                        <docencoding>${maven.javadoc.charset}</docencoding>
                    </configuration>
                    <!-- settings -> build tool -> Maven -> Runner -> MAVEN_OPTS=-Dfile.encoding=UTF-8;JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8-->
                    <!--<tags>
                        <tag>
                            <name>Description</name>
                            <placement>a</placement>
                            <head>描述</head>
                        </tag>
                        <tag>
                            <name>return</name>
                            <placement>a</placement>
                            <head>返回值</head>
                        </tag>
                        <tag>
                            <name>param...</name>
                            <placement>a</placement>
                            <head>参数</head>
                        </tag>
                        <tag>
                            <name>date</name>
                            <placement>a</placement>
                            <head>时间</head>
                        </tag>
                    </tags>-->

                    <!--网络不佳，snapshot仅发布jar以提高快照发布速度-->
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <phase>deploy</phase><!-- ACTIVE_WITH_package -->
                            <goals>
                                <goal>jar</goal>
                            </goals>
                            <configuration>
                                <!-- 取消对源码中的doc参数注释等检查 3.x 之前为 additionalparam -->
                                <additionalJOption>-Xdoclint:none</additionalJOption>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- 单测覆盖率 -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/jacoco-report</outputDirectory>
                                <outputEncoding>UTF-8</outputEncoding>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- GPG  maven中央仓库发布安全签名插件 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>${maven-gpg-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <phase>deploy</phase><!-- ACTIVE_WITH_verify -->
                            <goals>
                                <goal>sign</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- findbugs 检查代码问题 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>findbugs-maven-plugin</artifactId>
                    <version>${findbugs-maven-plugin.version}</version>
                    <configuration>
                        <!--<excludeFilterFile>tools/findbugs/findbugs-exclude.xml</excludeFilterFile>-->
                        <threshold>High</threshold>
                        <effort>Default</effort>
                        <findbugsXmlOutput>true</findbugsXmlOutput>
                        <findbugsXmlOutputDirectory>target/site/findbugs</findbugsXmlOutputDirectory>
                    </configuration>
                </plugin>

                <!-- 单元测试配置 when mvn test https://github.com/apache/maven-surefire/blob/master/maven-surefire-plugin/src/main/java/org/apache/maven/plugin/surefire/SurefirePlugin.java -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <!-- 这里参数可能影响使用者，暂时约定需要带 Test 后缀 -->
                        <includes>
                            <include>**/*Test.java</include>
                            <include>**/*Test.groovy</include>
                            <include>**/*Spec.*</include>
                        </includes>
                        <threadCountSuites>2</threadCountSuites>
                        <!-- 这里的max参数可能导致使用者 OOM，暂不添加最大值 -->
                        <argLine>-Xms256m -XX:MetaspaceSize=128m -Dfile.encoding=utf-8</argLine>
                        <argLine>--add-modules java.xml.bind</argLine>
                        <argLine>--add-modules java.activation</argLine>
                        <argLine>--add-opens=java.base/java.lang=ALL-UNNAMED --illegal-access=warn</argLine>
                    </configuration>
                </plugin>

                <!-- cobertura 单元测试覆盖率插件 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <version>${cobertura-maven-plugin.version}</version>
                </plugin>

                <!-- 自动生成文档 支持 JSR-303 Bean Validation -->
                <!--<plugin>
                    <groupId>org.springdoc</groupId>
                    <artifactId>springdoc-openapi-maven-plugin</artifactId>
                    <version>${springdoc-openapi-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>integration-test</phase>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        &lt;!&ndash;访问json格式文档的URL， 默认路径：*http://localhost:8080/v3/api-docs*&ndash;&gt;
                        <apiDocsUrl>http://localhost:8080/v3/api-docs</apiDocsUrl>
                        &lt;!&ndash;存放定义的路径, 默认为： openapi.json&ndash;&gt;
                        <outputFileName>openApi.json</outputFileName>
                        &lt;!&ndash;文档存放的绝对路径–默认为： ${project.build.directory}&ndash;&gt;
                        <outputDir>${project.build.directory}</outputDir>
                    </configuration>
                </plugin>-->

                <!-- sonar 代码检查插件 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${sonar-maven-plugin.version}</version>
                </plugin>

                <!-- 管理版本号 mvn versions:set -DnewVersion=NEW_VERSION -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions-maven-plugin.version}</version>
                </plugin>

                <!-- 编辑 MANIFEST.MF -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                    <configuration>
                        <archive>
                            <index>true</index>
                            <manifest>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            </manifest>
                            <manifestEntries>
                                <Build-OS>${os.name}</Build-OS>
                                <Build-Jdk>${java.version}</Build-Jdk>
                                <Build-Timestamp>${maven.build.timestamp}</Build-Timestamp>
                                <Implementation-Title>${project.artifactId}</Implementation-Title>
                                <Implementation-Version>${project.version}</Implementation-Version>
                                <Implementation-Vendor-Id>org.shoulder</Implementation-Vendor-Id>
                                <Implementation-URL>org.shoulder</Implementation-URL>
                                <Built-By>${env.USERNAME}</Built-By>
                            </manifestEntries>
                        </archive>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>io.github.git-commit-id</groupId>
                    <artifactId>git-commit-id-maven-plugin</artifactId>
                    <version>${git-commit-id-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!--日期格式;默认值:dd.MM.yyyy '@' HH:mm:ss z;-->
                        <dateFormat>yyyyMMddHHmmss</dateFormat>
                        <!--,构建过程中,是否打印详细信息;默认值:false;-->
                        <verbose>true</verbose>
                        <!-- ".git"文件路径;默认值:${project.basedir}/.git; -->
                        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                        <!--若项目打包类型为pom,是否取消构建;默认值:true;-->
                        <skipPoms>false</skipPoms>
                        <!--是否生成"git.properties"文件;默认值:false;-->
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <!--指定"git.properties"文件的存放路径(相对于${project.basedir}的一个路径);-->
                        <generateGitPropertiesFilename>/src/main/resource/git.properties</generateGitPropertiesFilename>
                        <!--".git"文件夹未找到时,构建是否失败;若设置true,则构建失败;若设置false,则跳过执行该目标;默认值:true;-->
                        <failOnNoGitDirectory>true</failOnNoGitDirectory>

                        <!--git描述配置,可选;由JGit提供实现;-->
                        <gitDescribe>
                            <!--是否生成描述属性-->
                            <skip>false</skip>
                            <!--提交操作未发现tag时,仅打印提交操作ID,-->
                            <always>false</always>
                            <!--提交操作ID显式字符长度,最大值为:40;默认值:7;
                                0代表特殊意义;后面有解释;
                            -->
                            <abbrev>7</abbrev>
                            <!--构建触发时,代码有修改时(即"dirty state"),添加指定后缀;默认值:"";-->
                            <dirty>-dirty</dirty>
                            <!--always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag.
                                The distance will always be 0 if you're "on" the tag.
                            -->
                            <forceLongFormat>false</forceLongFormat>
                        </gitDescribe>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

</project>
